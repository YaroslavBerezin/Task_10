package ru.sc.vsu.berezin_y_a;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ru.sc.vsu.berezin_y_a.Utils.JTableUtils;
import ru.sc.vsu.berezin_y_a.Utils.ListUtils;
import ru.sc.vsu.berezin_y_a.Utils.SwingUtils;

public class FrameMain extends JFrame {

    private JButton buttonRun;
    private JTable tableInput;
    private JPanel panelMain;
    private JButton buttonSaveInFile;
    private JButton buttonUploadFromFile;
    private JTextField textFieldForAnswer;
    private JTextField textField1;

    private JFileChooser fileChooserOpen;
    private JFileChooser fileChooserSave;

    public FrameMain() {

        this.setTitle("Task 10");
        this.setContentPane(panelMain);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(450, 200, 300, 300);
        this.setResizable(false);
        this.pack();

        fileChooserOpen = new JFileChooser();
        fileChooserSave = new JFileChooser();
        fileChooserOpen.setCurrentDirectory(new File("."));
        fileChooserSave.setCurrentDirectory(new File("."));
        FileFilter filter = new FileNameExtensionFilter("Text files", "txt");
        fileChooserOpen.addChoosableFileFilter(filter);
        fileChooserSave.addChoosableFileFilter(filter);


        JTableUtils.initJTableForArray(tableInput, 50, true, true,
                true, false);
        tableInput.setRowHeight(30);

        String[][] arr = {
                {"Asus", "128", "5", "40000"}
        };

        List<Tablet> list = new ArrayList<>();
        JTableUtils.writeArrayToJTable(tableInput, arr);

        String[] columnNames = {"Name", "Memory", "Rating", "Price"};
        JTableUtils.renameJTableColumns(tableInput, columnNames);

        this.pack();

        TabletSelection tablet = new TabletSelection();

        buttonRun.addActionListener(e -> {
            try {
                int countOfMoney = Integer.parseInt(textField1.getText());
                String[][] arrStr = JTableUtils.readStringMatrixFromJTable(tableInput);
                list.clear();
                for (int i = 0; i < arrStr.length; i++) {
                    list.add(new Tablet(arrStr[i][0], Integer.parseInt(arrStr[i][1]), Integer.parseInt(arrStr[i][2]),
                            Integer.parseInt(arrStr[i][3])));
                }
                textFieldForAnswer.setText("Answer: " +
                        tablet.returnChosenTablet(list, tablet.returnIndex(list, countOfMoney)));
            }
            catch (Exception exception) {
                SwingUtils.showErrorMessageBox(exception);
            }
        });

        buttonUploadFromFile.addActionListener(e -> {
            try {
                if (fileChooserOpen.showOpenDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                    List<List<String>> listStr = ListUtils.loadStringList2FromFile(fileChooserOpen.getSelectedFile()
                            .getPath());
                    JTableUtils.writeArrayToJTable(tableInput, ListUtils.toStringArr2(listStr));
                }
            } catch (Exception exception) {
                SwingUtils.showErrorMessageBox(exception);
            }
        });

        buttonSaveInFile.addActionListener(e -> {
            try {
                int countOfMoney = Integer.parseInt(textField1.getText());
                if (fileChooserSave.showSaveDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                    String file = fileChooserSave.getSelectedFile().getPath();
                    PrintWriter pw = new PrintWriter(file);
                    if (!file.toLowerCase().endsWith(".txt")) {
                        file += ".txt";
                    }
                    pw.println("Answer: " + tablet.returnChosenTablet(list,
                            tablet.returnIndex(list, countOfMoney)));
                    pw.close();
                }
            } catch (Exception exception) {
                SwingUtils.showErrorMessageBox(exception);
            }
        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), 10, 10));
        panelMain.setMaximumSize(new Dimension(500, 300));
        panelMain.setMinimumSize(new Dimension(200, 200));
        panelMain.setPreferredSize(new Dimension(500, 300));
        panelMain.setRequestFocusEnabled(false);
        final JScrollPane scrollPane1 = new JScrollPane();
        panelMain.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableInput = new JTable();
        scrollPane1.setViewportView(tableInput);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonSaveInFile = new JButton();
        buttonSaveInFile.setText("Save in file");
        panel1.add(buttonSaveInFile, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFieldForAnswer = new JTextField();
        textFieldForAnswer.setEditable(false);
        panel2.add(textFieldForAnswer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonRun = new JButton();
        buttonRun.setText("Run");
        panel3.add(buttonRun, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonUploadFromFile = new JButton();
        buttonUploadFromFile.setText("Upload from file");
        panel3.add(buttonUploadFromFile, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
